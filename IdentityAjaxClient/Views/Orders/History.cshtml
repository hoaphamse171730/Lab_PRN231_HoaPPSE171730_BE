@using BusinessObjects.Shared
@{
    ViewData["Title"] = "My Orders";
}

<h2 class="text-center mb-4">@ViewData["Title"]</h2>
<div class="orders-card">
  <div class="row mb-4">
      <div class="col-md-3">
          <label class="form-label">From</label>
          <input id="filterFrom" type="date" class="form-control" />
      </div>
      <div class="col-md-3">
          <label class="form-label">To</label>
          <input id="filterTo" type="date" class="form-control" />
      </div>
      <div class="col-md-3">
          <label class="form-label">Status</label>
          <select id="filterStatus" class="form-select">
              <option value="">All statuses</option>
              <option>@Constants.OrderStatusPending</option>
              <option>@Constants.OrderStatusProcessing</option>
              <option>@Constants.OrderStatusCompleted</option>
              <option>@Constants.OrderStatusCancelled</option>
          </select>
      </div>
      <div class="col-md-2 align-self-end d-grid">
          <button id="btnFilter" class="btn btn-primary">Filter</button>
      </div>
  </div>
  <table id="tblHistory" class="table orders-table">
      <thead>
          <tr>
              <th>Order ID</th>
              <th>Date</th>
              <th>Status</th>
              <th>Total</th>
              <th>Actions</th>
          </tr>
      </thead>
      <tbody></tbody>
  </table>
  <nav>
      <ul class="pagination">
          <li class="page-item" id="prevPage"><button class="page-link">Previous</button></li>
          <li class="page-item disabled"><span class="page-link" id="pageInfo"></span></li>
          <li class="page-item" id="nextPage"><button class="page-link">Next</button></li>
      </ul>
  </nav>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        const ROUTES   = { orders: '@BusinessObjects.Shared.ApiRoutes.Orders' };
        const token    = localStorage.getItem('jwt') || '';
        const role     = localStorage.getItem('role');
        $.ajaxSetup({ headers:{ 'Authorization':'Bearer '+token } });

        const STATUS = {
          Pending:    '@Constants.OrderStatusPending',
          Processing: '@Constants.OrderStatusProcessing',
          Completed:  '@Constants.OrderStatusCompleted',
          Cancelled:  '@Constants.OrderStatusCancelled'
        };

        const pageSize    = 10;
        let currentPage   = 1,
            totalCount    = 0,
            currentStatus = '',
            currentFrom   = '',
            currentTo     = '';

        function buildQuery(page) {
          const qs = [
            `page=${page}`,
            `pageSize=${pageSize}`,
            currentStatus    && `status=${encodeURIComponent(currentStatus)}`,
            currentFrom      && `from=${encodeURIComponent(currentFrom)}`,
            currentTo        && `to=${encodeURIComponent(currentTo)}`
          ].filter(Boolean);
          return qs.join('&');
        }

        function loadPage(page) {
          $.get(`${ROUTES.orders}?${buildQuery(page)}`, resp => {
            const { items, totalCount: tot } = resp;
            totalCount = tot;
            renderTable(items);
            updatePagination();
          });
        }

        function renderTable(list) {
          const rows = list.map(o => {
            let btns = '';
            if (role==='Staff') {
              if (o.orderStatus===STATUS.Pending) {
                btns = `
                  <button class="btn btn-sm btn-success process" data-id="${o.id}">Process</button>
                  <button class="btn btn-sm btn-danger cancel"  data-id="${o.id}">Cancel</button>
                `;
              } else if (o.orderStatus===STATUS.Processing) {
                btns = `
                  <button class="btn btn-sm btn-primary complete" data-id="${o.id}">Complete</button>
                  <button class="btn btn-sm btn-danger  cancel"   data-id="${o.id}">Cancel</button>
                `;
              }
            }
            // Status badge class
            let statusClass = '';
            if (o.orderStatus === STATUS.Pending) statusClass = 'status-badge status-pending';
            else if (o.orderStatus === STATUS.Processing) statusClass = 'status-badge status-processing';
            else if (o.orderStatus === STATUS.Completed) statusClass = 'status-badge status-completed';
            else if (o.orderStatus === STATUS.Cancelled) statusClass = 'status-badge status-cancelled';
            const total = Math.max(1000, Math.round(o.totalAmount));
            return `
            <tr data-id="${o.id}">
              <td>${o.id}</td>
              <td>${new Date(o.orderDate).toLocaleString()}</td>
              <td class="status-cell"><span class="${statusClass}">${o.orderStatus}</span></td>
              <td>${total.toLocaleString('vi-VN')}₫</td>
              <td>
                <a href="/Orders/Details/${o.id}" class="btn btn-sm btn-info me-1">Details</a>
                ${btns}
              </td>
            </tr>`;
          }).join('');
          $('#tblHistory tbody').html(rows);
        }

        function updatePagination() {
          const totalPages = Math.ceil(totalCount / pageSize);
          $('#pageInfo').text(`Page ${currentPage} of ${totalPages}`);
          $('#prevPage').toggleClass('disabled', currentPage<=1);
          $('#nextPage').toggleClass('disabled', currentPage>=totalPages);
        }

        $('#prevPage').click(()=>{ if(currentPage>1) loadPage(--currentPage); });
        $('#nextPage').click(()=>{ if(currentPage*pageSize<totalCount) loadPage(++currentPage); });

        function changeStatus(id,newStatus,$row) {
          $.ajax({
            url: `${ROUTES.orders}/${id}/status`,
            type: 'PUT',
            contentType: 'application/json',
            data: JSON.stringify({ status: newStatus })
          }).done(()=>{
            loadPage(currentPage);
            showNotification('Order status updated!', 'success');
          }).fail((xhr,_,err)=>{
            showNotification('Failed: '+(xhr.responseText||err), 'error');
          });
        }

        $(document).on('click','.process', function(){
          const $r = $(this).closest('tr');
          changeStatus($r.data('id'), STATUS.Processing, $r);
        });
        $(document).on('click','.complete', function(){
          const $r = $(this).closest('tr');
          changeStatus($r.data('id'), STATUS.Completed, $r);
        });
        $(document).on('click','.cancel', function(){
          const $r = $(this).closest('tr');
          // Custom confirm notification
          const orderId = $r.data('id');
          const notifId = 'notif-cancel-' + orderId;
          // Remove any existing confirm notification
          $('#' + notifId).remove();
          const container = document.getElementById('notification-container');
          const notif = document.createElement('div');
          notif.className = 'notification warning';
          notif.id = notifId;
          notif.innerHTML = `Are you sure you want to cancel this order? <button class="btn btn-sm btn-danger ms-2" style="border-radius:12px;" id="btnConfirmCancel${orderId}">Yes, Cancel</button>`;
          container.appendChild(notif);
          document.getElementById('btnConfirmCancel'+orderId).onclick = function() {
            notif.remove();
            changeStatus(orderId, STATUS.Cancelled, $r);
          };
          setTimeout(() => {
            if (notif.parentNode) notif.remove();
          }, 5000);
        });

        // Apply calendar filters
        $('#btnFilter').click(() => {
          currentStatus = $('#filterStatus').val() || '';
          currentFrom   = $('#filterFrom').val()   || '';
          currentTo     = $('#filterTo').val()     || '';
          currentPage   = 1;
          loadPage(1);
        });

        // Initialize
        $(function(){
          // default dates empty (all)
          loadPage(1);
        });
    </script>
}
