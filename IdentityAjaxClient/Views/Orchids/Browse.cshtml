@using BusinessObjects.Shared
@{
    ViewData["Title"] = "Orchid Catalog";
}

<h2>@ViewData["Title"]</h2>

<div class="row mb-3">
    <div class="col-md-3">
        <input id="searchName" class="form-control" placeholder="Search by name…" />
    </div>
    <div class="col-md-2">
        <select id="filterCategory" class="form-select">
            <option value="">All categories</option>
        </select>
    </div>
    <div class="col-md-2">
        <input id="minPrice" type="number" step="0.01"
               class="form-control" placeholder="Min price" />
    </div>
    <div class="col-md-2">
        <input id="maxPrice" type="number" step="0.01"
               class="form-control" placeholder="Max price" />
    </div>
    <div class="col-md-1">
        <button id="btnFilter" class="btn btn-primary">Filter</button>
    </div>
</div>

<div id="orchidCardGrid" class="row g-4"></div>

<nav>
    <ul class="pagination">
        <li class="page-item" id="prevPage"><button class="page-link">Previous</button></li>
        <li class="page-item disabled"><span class="page-link" id="pageInfo"></span></li>
        <li class="page-item" id="nextPage"><button class="page-link">Next</button></li>
    </ul>
</nav>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        const ROUTES = { orchids: '@ApiRoutes.Orchids', categories: '@ApiRoutes.Categories' };
        const token  = localStorage.getItem('jwt') || '';
        $.ajaxSetup({ headers:{ 'Authorization':'Bearer '+token } });

        const pageSize     = 6;
        let currentPage    = 1,
            totalCount     = 0,
            searchName     = '',
            categoryId     = '',
            minPrice       = '',
            maxPrice       = '';

        function buildQuery(page) {
          const q = [
            `page=${page}`,
            `pageSize=${pageSize}`,
            searchName    && `searchName=${encodeURIComponent(searchName)}`,
            categoryId    && `categoryId=${encodeURIComponent(categoryId)}`,
            minPrice      && `minPrice=${encodeURIComponent(minPrice)}`,
            maxPrice      && `maxPrice=${encodeURIComponent(maxPrice)}`
          ].filter(Boolean);
          return q.join('&');
        }

        function loadPage(page) {
          $.get(`${ROUTES.orchids}?${buildQuery(page)}`, resp => {
            const { items, totalCount: tot } = resp;
            totalCount = tot;
            renderCards(items);
            updatePagination();
          });
        }

        function renderCards(list) {
          const cards = list.map(o => `
            <div class="col-12 col-sm-6 col-md-4">
              <div class="card h-100 shadow orchid-card">
                <img src="${o.orchidUrl || '/images/placeholder.png'}" class="card-img-top" alt="${o.orchidName}" style="height:180px; object-fit:cover; background:#fff0f6;">
                <div class="card-body d-flex flex-column">
                  <h5 class="card-title mb-1">${o.orchidName}</h5>
                  <div class="mb-2">
                    <span class="badge bg-${o.isNatural ? 'success' : 'secondary'}" style="font-size:0.9em;">${o.isNatural ? 'Natural' : 'Hybrid'}</span>
                  </div>
                  <div class="mb-2 text-muted" style="font-size:0.95em;">${o.category?.categoryName || '—'}</div>
                  <div class="mb-2"><strong>$${o.price.toFixed(2)}</strong></div>
                  <div class="input-group input-group-sm mb-2" style="max-width:160px;">
                    <span class="input-group-text">Quantity</span>
                    <input type="number" class="form-control qty" aria-label="Quantity" value="1" min="1" data-price="${o.price}" data-id="${o.orchidId}">
                  </div>
                  <div class="mb-2">Total: $<span class="subcell">${o.price.toFixed(2)}</span></div>
                  <div class="mt-auto d-flex gap-2">
                    <a href="/Orchids/Details/${o.orchidId}" class="btn btn-sm btn-info">Details</a>
                    <button class="btn btn-sm btn-primary add-cart" data-id="${o.orchidId}">Add to Cart</button>
                  </div>
                </div>
              </div>
            </div>
          `).join('');
          $('#orchidCardGrid').html(cards);
        }

        function updatePagination() {
          const totalPages = Math.ceil(totalCount / pageSize);
          $('#pageInfo').text(`Page ${currentPage} of ${totalPages}`);
          $('#prevPage').toggleClass('disabled', currentPage <= 1);
          $('#nextPage').toggleClass('disabled', currentPage >= totalPages);
        }

        $('#prevPage').click(()=>{ if(currentPage>1) loadPage(--currentPage); });
        $('#nextPage').click(()=>{
          if(currentPage*pageSize<totalCount) loadPage(++currentPage);
        });

        $('#btnFilter').click(()=>{
          searchName  = $('#searchName').val().trim();
          categoryId  = $('#filterCategory').val();
          minPrice    = $('#minPrice').val();
          maxPrice    = $('#maxPrice').val();
          currentPage = 1;
          loadPage(1);
        });

        // qty → subtotal
        $(document).on('input','.qty',function(){
          const $card = $(this).closest('.card');
          const qty = parseInt(this.value)||1;
          const price = parseFloat($(this).data('price'));
          $card.find('.subcell').text((qty*price).toFixed(2));
        });

        // add to cart
        $(document).on('click','.add-cart',function(){
          const $card = $(this).closest('.card');
          const id    = +$(this).data('id');
          const name  = $card.find('.card-title').text();
          const price = parseFloat($card.find('.qty').data('price'));
          const qty   = +$card.find('.qty').val()||1;
          const cart  = JSON.parse(localStorage.getItem('cart')||'[]');
          const item  = cart.find(i=>i.id===id);
          if(item) item.quantity += qty;
          else cart.push({ id, name, price, quantity: qty });
          localStorage.setItem('cart', JSON.stringify(cart));
          showNotification(`Added ${qty}× ${name} to cart!`, 'success');
        });

        // Initial load: unwrap resp.items here, too
        $(async function(){
          await $.get(ROUTES.categories, resp => {
            const data = resp.items;
            const opts = ['<option value="">All categories</option>']
              .concat(data.map(c=>
                `<option value="${c.categoryId}">${c.categoryName}</option>`));
            $('#filterCategory').html(opts.join(''));
          });
          loadPage(1);
        });
    </script>
}
