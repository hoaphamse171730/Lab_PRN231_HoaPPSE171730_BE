@{
    ViewData["Title"] = "Orchid Catalog";
}

<h2>@ViewData["Title"]</h2>

<div class="row mb-3">
    <div class="col-md-3">
        <input id="searchName" class="form-control" placeholder="Search by name…" />
    </div>
    <div class="col-md-2">
        <select id="filterCategory" class="form-select">
            <option value="">All categories</option>
        </select>
    </div>
    <div class="col-md-2">
        <input id="minPrice" type="number" step="0.01" class="form-control" placeholder="Min price" />
    </div>
    <div class="col-md-2">
        <input id="maxPrice" type="number" step="0.01" class="form-control" placeholder="Max price" />
    </div>
    <div class="col-md-1">
        <button id="btnFilter" class="btn btn-primary">Filter</button>
    </div>
</div>

<table id="tblCatalog" class="table table-hover">
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Price</th>
            <th>Natural?</th>
            <th>Category</th>
            <th>Image</th>
            <th style="width:80px">Qty</th>
            <th style="width:100px">Total</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody></tbody>
</table>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        const ROUTES = {
          orchids:    '@BusinessObjects.Shared.ApiRoutes.Orchids',
          categories: '@BusinessObjects.Shared.ApiRoutes.Categories'
        };
        $.ajaxSetup({
          headers: { 'Authorization': 'Bearer ' + (localStorage.getItem('jwt') || '') }
        });

        let allOrchids = [], allCategories = [];

        function loadCategories() {
          return $.get(ROUTES.categories, data => {
            allCategories = data;
            const opts = ['<option value="">All categories</option>']
              .concat(data.map(c=>`<option value="${c.categoryId}">${c.categoryName}</option>`));
            $('#filterCategory').html(opts.join(''));
          });
        }

        function loadOrchids() {
          return $.get(ROUTES.orchids, data => {
            allOrchids = data;
            renderTable(data);
          });
        }

        function renderTable(list) {
          const rows = list.map(o=> {
            const unit = o.price.toFixed(2);
            return `
            <tr data-id="${o.orchidId}" data-price="${o.price}">
              <td>${o.orchidId}</td>
              <td>${o.orchidName}</td>
              <td>${unit}</td>
              <td>${o.isNatural ? 'Yes':'No'}</td>
              <td>${o.category?.categoryName||'—'}</td>
              <td>${
                o.orchidUrl
                 ? `<img src="${o.orchidUrl}" style="max-height:60px;" />`
                 : '—'
              }</td>
              <td>
                <input type="number" class="form-control form-control-sm qty-input"
                       value="1" min="1" />
              </td>
              <td class="total-cell">${unit}</td>
              <td>
                <a href="/Orchids/Details/${o.orchidId}" class="btn btn-sm btn-info me-1">
                  Details
                </a>
                <button class="btn btn-sm btn-primary add-cart">
                  Add to Cart
                </button>
              </td>
            </tr>`;
          }).join('');
          $('#tblCatalog tbody').html(rows);
        }

        // Update total on qty change
        $(document).on('input', '.qty-input', function(){
          const $r = $(this).closest('tr'),
                qty = parseInt(this.value)||1,
                price = parseFloat($r.data('price'));
          $r.find('.total-cell').text((price*qty).toFixed(2));
        });

        // Add to cart
        $(document).on('click', '.add-cart', function(){
          const $r    = $(this).closest('tr'),
                id    = +$r.data('id'),
                name  = $r.find('td').eq(1).text(),
                price = +$r.data('price'),
                qty   = parseInt($r.find('.qty-input').val())||1,
                cart  = JSON.parse(localStorage.getItem('cart')||'[]'),
                item  = cart.find(i=>i.id===id);
          if (item) item.quantity += qty;
          else cart.push({ id, name, price, quantity: qty });
          localStorage.setItem('cart', JSON.stringify(cart));
          alert(`Added ${qty}× ${name} to cart.`);
        });

        // Filtering
        $('#btnFilter').click(()=>{
          const name     = ($('#searchName').val()||'').toLowerCase(),
                cat      = $('#filterCategory').val(),
                minPrice = parseFloat($('#minPrice').val()),
                maxPrice = parseFloat($('#maxPrice').val());

          const filtered = allOrchids.filter(o=>{
            const price = o.price;
            const byName = !name || o.orchidName.toLowerCase().includes(name);
            const byCat  = !cat  || o.categoryId == cat;
            const byMin  = isNaN(minPrice) || price >= minPrice;
            const byMax  = isNaN(maxPrice) || price <= maxPrice;
            return byName && byCat && byMin && byMax;
          });

          renderTable(filtered);
        });

        // Init
        $(async ()=>{ await loadCategories(); await loadOrchids(); });
    </script>
}
